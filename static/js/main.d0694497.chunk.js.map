{"version":3,"sources":["ui/card/icons/close.svg","globals.ts","constants.ts","ui/preloader/preloader.styles.ts","ui/preloader/preloader.tsx","ui/card/card.styles.ts","ui/card/card.tsx","client/apolloQueries.ts","ui/characters/characters.styles.ts","ui/characters/characters.tsx","ui/input/input.styles.ts","ui/input/input.tsx","ui/search-panel/search-panel.tsx","hooks/useDebounce.tsx","ui/party/party.styles.ts","ui/party/party.tsx","ui/app/app.styles.ts","ui/app/app.tsx","client/index.ts","index.tsx"],"names":["module","exports","global","SC_DISABLE_SPEEDY","spinnerRotate","keyframes","spinnerOffset","Circle","styled","circle","Svg","svg","Preloader","version","x","y","viewBox","cx","cy","r","CardImage","div","imageUrl","type","css","CloseButton","button","closeImage","CardText","p","Card","children","onClick","onRemoveCharacter","role","data-testid","GET_CHARACTERS_QUERY","gql","GET_PARTY_STATE_QUERY","UPDATE_PARTY_CHARACTER","Grid","ul","Column","li","ErrorText","WarningText","Characters","debouncedSearchTerm","removedCharacters","useQuery","variables","filter","name","data","loading","error","useMutation","updatePartyCharacter","characters","results","filteredCharacters","useMemo","id","indexOf","handleClick","useCallback","character","resources","errorText","length","map","image","key","e","stopPropagation","warningText","InputWrapper","input","Input","onChange","value","inputRef","useRef","useEffect","current","focus","handleChange","event","target","ref","Wrapper","SearchPanel","useState","removedIds","setRemoved","searchTerm","setSearchTerm","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","PartyWrapper","PartyTitle","title","CharactersContainer","CardWrapper","Party","rick","party","morty","cardName","left","right","Container","apolloClient","cache","InMemoryCache","getState","query","readQuery","writeState","state","writeData","__typename","ApolloClient","uri","resolvers","Mutation","_","toLowerCase","createClient","ReactDOM","render","client","document","getElementById"],"mappings":"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","file":"static/js/main.d0694497.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.f1d36c4b.svg\";","// @ts-ignore\nglobal.SC_DISABLE_SPEEDY = true;\n","export const DEBOUNCE_DELAY = 300;\nexport const RICK_MORTY_API = 'https://rickandmortyapi.com/graphql';\n","import styled, {keyframes} from 'styled-components';\n\nconst spinnerRotate = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n\n  50% {\n    transform: rotate(360deg);\n  }\n\n  100% {\n    transform: rotate(1080deg);\n  }\n`;\n\nconst spinnerOffset = keyframes`\n  0%,\n  100% {\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dashoffset: -280;\n  }\n`;\n\nexport const Circle = styled.circle`\n  fill: none;\n  stroke-dasharray: 280;\n  stroke-dashoffset: 100;\n  stroke-linecap: round;\n  stroke-width: 5;\n  stroke: #dadada;\n  animation: 3s ${spinnerOffset} linear infinite;\n`;\n\nexport const Svg = styled.svg`\n  margin-right: auto;\n  margin-left: auto;\n  display: block;\n  width: 80px;\n  height: 80px;\n  animation: 3s ${spinnerRotate} linear infinite;\n`;\n","import React from 'react';\nimport {Svg, Circle} from './preloader.styles';\n\ninterface IProps {}\n\nexport const Preloader: React.FC<IProps> = () => {\n  return (\n    <Svg version=\"1.1\" x=\"0\" y=\"0\" viewBox=\"0 0 100 100\">\n      <Circle cx=\"50\" cy=\"50\" r=\"44\" />\n    </Svg>\n  );\n};\n","import styled, { css } from 'styled-components';\nimport closeImage from './icons/close.svg';\nimport {CardType} from './card';\n\nexport const CardImage = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  background-color: #dadada;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n  ${({imageUrl, type}: {imageUrl?: string | null; type: CardType}) =>\n    imageUrl &&\n    css`\n    background-image: url(${imageUrl});\n    background-size: cover;\n  `}\n  ${({type}: {type: CardType}) => type === 'party' && css`cursor: default;`}\n`;\n\nexport const CloseButton = styled.button`\n  position: absolute;\n  cursor: pointer;\n  top: 8px;\n  width: 30px;\n  height: 30px;\n  right: 8px;\n  background-image: url(${closeImage});\n`;\n\nexport const CardText = styled.p`\n  @import 'https://fonts.googleapis.com/css?family=Roboto:300,400,500';\n  /* stylelint-disable font-family-no-missing-generic-family-keyword */\n  font-family: Roboto;\n  text-align: center;\n  color: #ffffff;\n  font-weight: 300;\n  font-size: 24px;\n  line-height: 28px;\n  text-transform: uppercase;\n  margin-bottom: 28px;\n`;\n","import React from 'react';\nimport {CardImage, CardText, CloseButton} from './card.styles';\n\nexport type CardType = 'party' | 'default';\n\ninterface IProps {\n  imageUrl?: string | null;\n  onClick?: (e: React.SyntheticEvent) => void;\n  onRemoveCharacter?: (e: React.SyntheticEvent) => void;\n  type?: CardType;\n  children?: any;\n}\n\nexport const Card: React.FC<IProps> = ({children, onClick, imageUrl, type = 'default', onRemoveCharacter}) => {\n  return (\n    <CardImage type={type} role=\"button\" data-testid=\"character-card\" imageUrl={imageUrl} onClick={onClick}>\n      {type === 'default' && <CloseButton data-testid=\"remove\" type=\"button\" onClick={onRemoveCharacter} />}\n      {type === 'party' && !imageUrl && <CardText>{children}</CardText>}\n    </CardImage>\n  );\n};\n","import gql from 'graphql-tag';\n\nexport const GET_CHARACTERS_QUERY = gql`\n  query CharactersQuery($filter: FilterCharacter) {\n    characters(filter: $filter) {\n      results {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n\nexport const GET_PARTY_STATE_QUERY = gql`\n  query Party {\n    party @client {\n      rick {\n        id\n        name\n        image\n      }\n      morty {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n\nexport const UPDATE_PARTY_CHARACTER = gql`\n  mutation updatePartyCharacter($character: Character) {\n    updatePartyCharacter(character: $character) @client\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Grid = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin-left: -10px;\n  margin-right: -10px;\n`;\n\nexport const Column = styled.li`\n  padding: 10px;\n  width: 100%;\n  height: 240px;\n  max-width: 200px;\n`;\n\nexport const ErrorText = styled.div`\n  color: #ff0000;\n  text-align: center;\n`;\n\nexport const WarningText = styled.div`\n  color: #dadada;\n  text-align: center;\n`;\n","import React, {useCallback, useMemo} from 'react';\nimport {Preloader} from '../preloader/preloader';\nimport {Card} from '../card/card';\nimport {useMutation, useQuery} from '@apollo/react-hooks';\nimport {GET_CHARACTERS_QUERY, UPDATE_PARTY_CHARACTER} from '../../client/apolloQueries';\nimport resources from './config.json';\nimport {QueryCharactersArgs} from '../../types/graphql';\nimport {ICharacter} from '../../types/types';\nimport {Column, ErrorText, Grid, WarningText} from './characters.styles';\n\ninterface IProps {\n  searchTerm: string;\n  debouncedSearchTerm: string;\n  onChange: (value: string) => void;\n  onRemoveCharacter: (id: string) => void;\n  removedCharacters: string[];\n}\n\nexport interface ICharactersData {\n  results: ICharacter[] | null;\n}\n\nexport interface ICharactersQuery {\n  characters: ICharactersData | null;\n}\n\nexport const Characters: React.FC<IProps> = ({debouncedSearchTerm, onRemoveCharacter, removedCharacters}: IProps) => {\n  const {data, loading, error} = useQuery<ICharactersQuery, QueryCharactersArgs>(GET_CHARACTERS_QUERY, {\n    variables: {\n      filter: {\n        name: debouncedSearchTerm,\n      },\n    },\n  });\n  const [updatePartyCharacter] = useMutation(UPDATE_PARTY_CHARACTER);\n  const characters = data?.characters?.results;\n  const filteredCharacters = useMemo(\n    () => characters && characters.filter(({id}: ICharacter) => removedCharacters.indexOf(id) === -1),\n    [characters, removedCharacters],\n  );\n\n  const handleClick = useCallback(\n    (character: ICharacter) => {\n      updatePartyCharacter({\n        variables: {\n          character,\n        },\n      });\n    },\n    [updatePartyCharacter],\n  );\n\n  if (loading) {\n    return <Preloader />;\n  }\n\n  if (error) {\n    return <ErrorText data-testid=\"error-text\">{resources.errorText}</ErrorText>;\n  }\n\n  if (!filteredCharacters || filteredCharacters.length === 0) {\n    return <WarningText data-testid=\"warning-text\">{resources.warningText}</WarningText>;\n  }\n\n  return (\n    <Grid>\n      {filteredCharacters?.map(({id, image, name}) => (\n        <Column key={id}>\n          <Card\n            imageUrl={image}\n            onRemoveCharacter={(e: React.SyntheticEvent) => {\n              e.stopPropagation();\n              onRemoveCharacter(id);\n            }}\n            onClick={() => handleClick({id, image, name})}\n          />\n        </Column>\n      ))}\n    </Grid>\n  );\n};\n","import styled from 'styled-components';\n\nexport const InputWrapper = styled.input`\n  @import 'https://fonts.googleapis.com/css?family=Roboto:300,400,500';\n  /* stylelint-disable font-family-no-missing-generic-family-keyword */\n  font-family: Roboto;\n  border: 1px solid #a0a0a0;\n  width: 100%;\n  line-height: 35px;\n  padding-top: 22px;\n  padding-right: 27px;\n  padding-bottom: 25px;\n  padding-left: 27px;\n  margin-bottom: 20px;\n  font-weight: 300;\n  font-size: 30px;\n  color: #000000;\n`;\n","import React, {useCallback, useRef, useEffect} from 'react';\nimport {IFieldInputCallback} from '../../types/types';\nimport {InputWrapper} from './input.styles';\n\ninterface IProps {\n  onChange: IFieldInputCallback;\n  value: string;\n}\n\nexport const Input: React.FC<IProps> = ({onChange, value}) => {\n  const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>;\n\n  useEffect(() => {\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [inputRef]);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<{name?: string; value: string}>): void => {\n      onChange(event.target.value);\n    },\n    [onChange],\n  );\n\n  return <InputWrapper data-testid=\"input\" ref={inputRef} value={value} onChange={handleChange} />;\n};\n","import React, {useState} from 'react';\nimport {useDebounce} from '../../hooks/useDebounce';\nimport {DEBOUNCE_DELAY} from '../../constants';\nimport {Characters} from '../characters/characters';\nimport styled from 'styled-components';\nimport {Input} from '../input/input';\n\ninterface Props {}\n\nconst Wrapper = styled.div`\n  margin-top: 141px;\n`;\n\nconst MIN_SYMBOLS_COUNT = 2;\n\nexport const SearchPanel: React.FC<Props> = () => {\n  const [removedIds, setRemoved] = useState<string[]>([]);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const debouncedSearchTerm = useDebounce(searchTerm, DEBOUNCE_DELAY);\n\n  const handleChange = (value: string) => {\n    setSearchTerm(value);\n  };\n\n  const handleRemoveCharacter = (id: string) => {\n    setRemoved([...removedIds, id]);\n  };\n\n  return (\n    <Wrapper>\n      <Input onChange={handleChange} value={searchTerm} />\n      {debouncedSearchTerm && debouncedSearchTerm.length > MIN_SYMBOLS_COUNT && (\n        <Characters\n          removedCharacters={removedIds}\n          onRemoveCharacter={handleRemoveCharacter}\n          searchTerm={searchTerm}\n          onChange={handleChange}\n          debouncedSearchTerm={debouncedSearchTerm}\n        />\n      )}\n    </Wrapper>\n  );\n};\n","import {useState, useEffect} from 'react';\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import styled from 'styled-components';\nexport const PartyWrapper = styled.div`\n  max-width: 380px;\n  margin-top: 90px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const PartyTitle = styled.title`\n  @import 'https://fonts.googleapis.com/css?family=Roboto:300,400,500';\n  /* stylelint-disable font-family-no-missing-generic-family-keyword */\n  font-family: Roboto;\n  display: block;\n  font-size: 30px;\n  line-height: 35px;\n  text-align: center;\n  color: #000000;\n  font-weight: bold;\n  text-transform: uppercase;\n  margin-bottom: 20px;\n`;\n\nexport const CharactersContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const CardWrapper = styled.div`\n  width: 100%;\n  height: 220px;\n  max-width: 200px;\n  ${({type}: {type: 'left' | 'right'}) =>\n    type === 'left'\n      ? `\n          padding-right: 10px;\n        `\n      : `\n          padding-left: 10px;\n        `}\n`;\n","import React from 'react';\nimport {CharactersContainer, PartyTitle, PartyWrapper, CardWrapper} from './party.styles';\nimport resources from './config.json';\nimport {Card} from '../card/card';\nimport {useQuery} from '@apollo/react-hooks';\nimport {GET_PARTY_STATE_QUERY} from '../../client/apolloQueries';\nimport {IPartyQuery} from '../../types/types';\ninterface IProps {}\n\nexport const Party: React.FC<IProps> = () => {\n  const {data} = useQuery<IPartyQuery, any>(GET_PARTY_STATE_QUERY);\n  const rick = data?.party?.rick;\n  const morty = data?.party?.morty;\n  return (\n    <PartyWrapper>\n      <PartyTitle data-testid=\"party-title\">{resources.title}</PartyTitle>\n      <CharactersContainer>\n        <CardWrapper data-testid=\"party-rick\" type=\"left\">\n          <Card imageUrl={rick?.image} type=\"party\">\n            {resources.cardName.left}\n          </Card>\n        </CardWrapper>\n        <CardWrapper data-testid=\"party-morty\" type=\"right\">\n          <Card imageUrl={morty?.image} type=\"party\">\n            {resources.cardName.right}\n          </Card>\n        </CardWrapper>\n      </CharactersContainer>\n    </PartyWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding-left: 10px;\n  padding-right: 10px;\n  margin-right: auto;\n  margin-left: auto;\n  width: 100%;\n  max-width: 810px;\n`;\n","import React from 'react';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {SearchPanel} from '../search-panel/search-panel';\nimport {createClient} from '../../client';\nimport {Party} from '../party/party';\nimport {Container} from './app.styles';\n\nconst apolloClient = createClient();\n\nexport const App: React.FC = () => {\n  return (\n    <ApolloProvider client={apolloClient}>\n      <Container>\n        <SearchPanel />\n        <Party />\n      </Container>\n    </ApolloProvider>\n  );\n};\n","import ApolloClient, {InMemoryCache, NormalizedCacheObject} from 'apollo-boost';\nimport {GET_PARTY_STATE_QUERY} from './apolloQueries';\nimport {ICharacter} from '../types/types';\nimport {RICK_MORTY_API} from '../constants';\nexport interface IState {\n  party: {\n    __typename: string;\n    rick?: ICharacter & {__typename: string};\n    morty?: ICharacter & {__typename: string};\n  };\n}\n\nexport function createClient(): ApolloClient<NormalizedCacheObject> {\n  const cache = new InMemoryCache({});\n\n  const getState = (query: any) => {\n    return cache.readQuery<IState>({query});\n  };\n\n  const writeState = (state: IState) => {\n    return cache.writeData({data: state});\n  };\n\n  const initState = () => {\n    const clientState = {\n      data: {\n        characters: {\n          __typename: 'Characters',\n          results: [],\n        },\n        party: {\n          __typename: 'Party',\n          rick: {\n            __typename: 'Character',\n            id: '',\n            name: '',\n            image: '',\n          },\n          morty: {\n            __typename: 'Character',\n            id: '',\n            name: '',\n            image: '',\n          },\n        },\n      },\n    };\n\n    cache.writeData(clientState);\n  };\n\n  initState();\n\n  return new ApolloClient({\n    uri: RICK_MORTY_API,\n    cache,\n    resolvers: {\n      Mutation: {\n        updatePartyCharacter: (_, {character}: {character: ICharacter}, {cache}: {cache: any}) => {\n          const data = getState(GET_PARTY_STATE_QUERY);\n\n          const rick = character.name.toLowerCase().indexOf('rick') !== -1;\n          const morty = character.name.toLowerCase().indexOf('morty') !== -1;\n\n          writeState({\n            party: {\n              __typename: 'Party',\n              rick: rick ? {...character, __typename: 'Character'} : data?.party.rick,\n              morty: morty\n                ? {\n                    ...character,\n                    __typename: 'Character',\n                  }\n                : data?.party.morty,\n            },\n          });\n\n          return null;\n        },\n      },\n    },\n  });\n}\n","import './globals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './ui/app/app';\n\nimport './styles/reset.css';\nimport './styles/reboot.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}